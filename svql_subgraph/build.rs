use std::{env, fs::File, io::Write, path::PathBuf};

use proc_macro2::{Ident, Span};
use quote::quote;
use svql_common::build_support::{sanitize_ident, test_case_names};

fn main() {
    // Re-run whenever the list of test cases changes
    println!("cargo:rerun-if-changed=../svql_common/src/test_cases.rs");

    let out_dir = PathBuf::from(env::var("OUT_DIR").expect("OUT_DIR"));
    let out_file = out_dir.join("svql_subgraph_generated_tests.rs");

    let test_case_names = test_case_names();

    let tests = test_case_names.iter().map(|name| {
        let fn_ident = Ident::new(
            &sanitize_ident(&format!("test_subgraph_{}", name)),
            Span::call_site(),
        );
        let name_lit = name.as_str();

        quote! {
            #[test]
            fn #fn_ident() {
                // Initialize test logger (captured by the test harness)
                init_test_logger();

                // Find the TestCase by name
                let tc = ALL_TEST_CASES
                    .iter()
                    .find(|t| t.name == #name_lit)
                    .expect("TestCase not found by name");

                // Only run for netlist-backed test cases
                if let Pattern::Netlist { path, module, .. } = tc.pattern {
                    let needle = import_design(path.into(), module)
                        .unwrap_or_else(|e| panic!("Failed to load needle {}: {}", path, e));
                    let haystack = import_design(tc.haystack.path.into(), tc.haystack.module)
                        .unwrap_or_else(|e| panic!("Failed to load haystack {}: {}", tc.haystack.path, e));

                    let matches = svql_subgraph::find_subgraphs(&needle, &haystack, &tc.config);
                    assert_eq!(
                        matches.len(),
                        tc.expected_matches,
                        "Subgraph test case '{}' failed: expected {} matches, got {}",
                        tc.name,
                        tc.expected_matches,
                        matches.len()
                    );
                } else {
                    // Not applicable for subgraph engine; no-op to mirror previous selective test behavior
                }
            }
        }
    });

    let file_tokens = quote! {
        // Auto-generated by build.rs. Do not edit by hand.

        use svql_common::{ALL_TEST_CASES, Pattern, import_design};
        use tracing_subscriber;

        fn init_test_logger() {
            let _ = tracing_subscriber::fmt()
                .with_env_filter(tracing_subscriber::EnvFilter::from_default_env())
                .with_test_writer()
                .try_init();
        }

        #(#tests)*
    };

    let mut f = File::create(&out_file).expect("Failed to create generated tests file");
    f.write_all(file_tokens.to_string().as_bytes())
        .expect("write generated tests");
}
